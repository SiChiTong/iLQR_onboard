For now, I am skipping the vectorization/parallelization of the forward pass so that
we can get this up and running quickly.
Eigen doesn't support 3D matrices...

Figure out where to put past inputs.
-------------
TODO
- step 2~4 in iLQR_core
	- check for termination due to small gradient

Check inputs/outputs individually:
- compute_derivatives
- forward_pass
- backward_pass

- integrate cost for change in control input


- write final control sequence and states to text file
- test whole thing and see if output looks reasonable - plot in matlab

-------------
FASTER
- optimize in this order: steps, 1, 2, 3

- calculate_derivatives
	- store auxiliary variables
	- change incrementing method?

- backward_pass


- make everything matrices instead of vectors of matrices?
- see links in notes
- consts everywhere
- vectorize for parallel line search

-----------
Later on:
- fix all the messy stuff
	- sort out public/private in classes
	- extract methods into smaller methods, especially in fw, bw, boxQP


- make it more readable
	- see google cpp style guide
	- refactor to completely separate iLQR class from Model class
		- make sure everything in iLQR is dimension-agnostic
		- there are currently some hacks
	- make it reusable
		- make skeleton for new Model class, for reference

- add documentation
- eigen helper functions are all inline right now to prevent duplicate symbol error - fix this
