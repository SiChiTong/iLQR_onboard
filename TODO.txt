Test everything individually by replicating function, testing with multiple
inputs, and comparing vs matlab.
Write tests for functions before starting implementation (if it's simple enough)
Best way to do this - refactor into a standalone function during testing?

For now, I am skipping the vectorization/parallelization of the forward pass so that
we can get this up and running quickly.

Figure out where to put past inputs.

Stuff to do (in approximate order)
- iLQR::init_traj (check pending)
- iLQR::forward_pass
- iLQR::backward_pass
- step 2 in iLQR_core
- step 3 in iLQR_core


- integrate cost for change in control input
- printing stuff in iLQR_main at every iteration
- simple version in boxQP
- write final control sequence and states to text file
- test whole thing and see if output looks reasonable
- iLQR::boxQP


Later on:
- fix all the messy stuff
	- sort out public/private
	- typedefs
- make it faster
	- vectorize for parallel line search
	- see links in notes
	- consts everywhere
	- see what the ddp-generator guy did to optimize
- refactor to completely separate iLQR class from Model class
- make it reusable
	- make skeleton for new Model class
- add documentation
